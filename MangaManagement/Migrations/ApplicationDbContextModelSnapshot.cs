// <auto-generated />
using MangaManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("CategoryStory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoriesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "StoriesId");

                    b.HasIndex("StoriesId");

                    b.ToTable("StoryCategory", (string)null);
                });

            modelBuilder.Entity("MangaManagement.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 7,
                            Name = "School Life"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 15,
                            Name = "BL (Boys' Love)"
                        },
                        new
                        {
                            Id = 16,
                            Name = "GL (Girls' Love)"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Martial Arts"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Isekai"
                        });
                });

            modelBuilder.Entity("MangaManagement.Models.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("CategoryStory", b =>
                {
                    b.HasOne("MangaManagement.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaManagement.Models.Story", null)
                        .WithMany()
                        .HasForeignKey("StoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
